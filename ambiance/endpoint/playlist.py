from datetime import date
from dataclasses import field, dataclass
from dataclasses_json import dataclass_json
import numpy as np
from typing import Dict, List, Tuple

from ambiance.model.db import DB
from ambiance.endpoint.endpoint import endpoint, POST


@dataclass_json
@dataclass
class CreateInput:
    session_id: str
    pool: List[Tuple[str, np.ndarray]]
    playlist_id: str = ""
    playlist_name: str = ""

@dataclass_json
@dataclass
class CreateOutput:
    session_id: str


# Generates the playlist for a user or regenerates the playlist
@endpoint(method=POST, body=CreateInput)
def create(body: CreateInput, user: str) -> CreateOutput:
    # instantiates spotipy
    sp = DB.users[user].spotipy
    # creates list of song uris
    uri_list = [tuple[0] for tuple in body.pool]
    # in the case where there is a pre-existing playlist passed
    if (body.playlist_id != ""):
        # replace all the tracks with the new pool of tracks
        sp.user_playlist_replace_tracks(user, body.playlist_id, *uri_list)
    # in the case where there is no pre-existing playlist passed
    else:
        # if there is no playlist name passed
        if body.playlist_name == "":
            # name the playlist after the session
            body.playlist_name = DB.sessions(body.session_id).name
        # creates the playlist with the new name
        playlist = sp.user_create_playlist(body.user_id, body.playlist_name,
                                "Playlist generated by Ambiance on " +
                                date.today().strftime("%B %d, %Y"))
        # adds the tracks
        sp.user_playlist_add_tracks(body.user_id, playlist["id"], *uri_list)
    return CreateOutput()